---
import Layout from '../layouts/Layout.astro';
import Parser from 'rss-parser';
import Card from '../components/Card.astro';
const parser = new Parser();

const sevenDaysAgo = new Date();
sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

const feedSources = [
  'https://www.smashingmagazine.com/feed/',
  'https://developer.mozilla.org/en-US/blog/rss.xml',
  'https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml',
  'https://www.liberation.fr/arc/outboundfeeds/rss-all/?outputType=xml',
]

interface FeedItem {
  feed?: string;
  title?: string;
  link?: string;
  articleDate?: Date;
  imageUrl?: string; 
}

const feedItems: FeedItem[] = [];

await Promise.allSettled(
  feedSources.map(async (source) => {
    try {
      const feed = await parser.parseURL(source);
      feed.items.forEach((item) => {
        const articleDate = item.pubDate ? new Date(item.pubDate) : undefined;
        if (articleDate && articleDate >= sevenDaysAgo) {
          feedItems.push({
            feed: feed.title,
            title: item.title,
            link: item.link,
            imageUrl: feed.image?.url,
            articleDate,
          });
        }
      });
    } catch (error) {
      console.error(`Error fetching feed from ${source}:`, error);
    }
  })
);

const sortedFeedItems = feedItems.sort((a, b) => (b.articleDate ?? new Date()).getTime() - (a.articleDate ?? new Date()).getTime());

---

<Layout title="My RSS Feed Buddy">
  <main>
  <h1>jfix rss collector</h1>
  {sortedFeedItems.map(item => (
    <Card title={item.title || ''} 
      body={item.feed || ''} 
      href={item.link || ''} 
      articleDate={item.articleDate || new Date()}
      imageUrl={item.imageUrl || ''}></Card>
  ))}
  </main>
</Layout>

<style>
html {
  background-color: #fff;
}
</style>